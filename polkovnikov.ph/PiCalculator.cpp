#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <functional>
#include <utility>
#include <sstream>
#include <iostream>
#include <cmath>
#include <ctime>
#include <limits>
#include <iterator>
#include <bitset>
#define sz(m)((m).size())
#define all(a)a.begin(),a.end()
#define forn(i,n)for(int i=0,i##e=n;i<i##e;++i)
#define fori(i,m)forn(i,sz(m))
#define each(i,m)for(typeof(m.begin())i=m.begin(),i##e=m.end();i!=i##e;++i)
#define srt(s)sort(all(s))
#define dump(m)copy(all(m),ostream_iterator<typeof(m[0])>(cout,"\n"));cout<<endl
using namespace std;

struct PiCalculator {
	string calculate(int p) {
		string pi = "141592653589793238462643383279";
		bool c = pi[p] - '0' >= 5;
		for (int i = p - 1; i >= 0; --i) {
			pi[i] += c;
			c = pi[i] - '0' > 9;
			if (c) pi[i] -= 10;
		}
		return "3." + pi.substr(0, p);
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	PiCalculator *obj;
	string answer;
	obj = new PiCalculator();
	clock_t startTime = clock();
	answer = obj->calculate(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = "3.14";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = "3.1416";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 12;
	p1 = "3.141592653590";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// The problem statement contains the unicode symbols.
// You are developing a new software calculator. A very important 
// feature is the auto-placing of the ? value by one click. The only problem is that you don't know
// the required precision. That's why you decided to write a program that can return ?
// with any reasonable precision.
// You are given an int precision. You should return the ? value with
// exactly precision digits after the decimal point. The last digit(s) should be rounded according 
// to the standard rounding rules (less than five round down, more than or equal to five round up).
// 
// 
// DEFINITION
// Class:PiCalculator
// Method:calculate
// Parameters:int
// Returns:string
// Method signature:string calculate(int precision)
// 
// 
// NOTES
// -? equals 3.141592653589793238462643383279...
// 
// 
// CONSTRAINTS
// -precision will be between 1 and 25, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 
// Returns: "3.14"
// 
// 1)
// 4
// 
// Returns: "3.1416"
// 
// The value should be rounded.
// 
// 2)
// 12
// 
// Returns: "3.141592653590"
// 
// Be careful with rounding.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
