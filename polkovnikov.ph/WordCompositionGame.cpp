#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <functional>
#include <utility>
#include <sstream>
#include <iostream>
#include <cmath>
#include <ctime>
#include <limits>
#include <iterator>
#include <bitset>
#define sz(m)((m).size())
#define all(a)a.begin(),a.end()
#define forn(i,n)for(int i=0,i##e=n;i<i##e;++i)
#define fori(i,m)forn(i,sz(m))
#define each(i,m)for(typeof(m.begin())i=m.begin(),i##e=m.end();i!=i##e;++i)
#define srt(s)sort(all(s))
#define dump(m)copy(all(m),ostream_iterator<typeof(m[0])>(cout,"\n"));cout<<endl
using namespace std;

struct WordCompositionGame {
	string score(vector <string> listA, vector <string> listB, vector <string> listC) {
		set<string> s[4];
		fori(i, listA) s[0].insert(listA[i]), s[1].insert(listA[i]);
		fori(i, listB) s[0].insert(listB[i]), s[2].insert(listB[i]);
		fori(i, listC) s[0].insert(listC[i]), s[3].insert(listC[i]);
		int sc[3] = {};
		each(i, s[0]) {
			int c = 0;
			forn(j, 3)
				c += s[j + 1].find(*i) != s[j + 1].end();
			c = 4 - c;
			forn(j, 3)
				if (s[j + 1].find(*i) != s[j + 1].end())
					sc[j] += c;
		}
		stringstream ss;
		forn(i, 3) {
			if (i != 0) ss << '/';
			ss << sc[i];
		}
		string st;
		getline(ss, st);
		return st;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, vector <string> p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	WordCompositionGame *obj;
	string answer;
	obj = new WordCompositionGame();
	clock_t startTime = clock();
	answer = obj->score(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	vector <string> p2;
	string p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"cat","dog","pig","mouse"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"cat","pig"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"dog","cat"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "8/3/3";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"mouse"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"cat","pig"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"dog","cat"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "3/5/5";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"dog","mouse"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"dog","pig"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"dog","cat"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "4/4/4";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"bcdbb","aaccd","dacbc","bcbda","cdedc","bbaaa","aecae"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"bcdbb","ddacb","aaccd","adcab","edbee","aecae","bcbda"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"dcaab","aadbe","bbaaa","ebeec","eaecb","bcbba","aecae","adcab","bcbda"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "14/14/21";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Three players are playing a game of word composition in which each player writes down a list of words. After the time expires the scores are calculated using the following rules. Each player gains 3 points for each unique word that only he has, 2 points for each word that is shared with exactly one other player, and 1 point for each word that is shared with both of the other players.
// You will be given vector <string>s listA, listB and listC - the word lists of playerA, playerB and playerC respectively. Your method should return scores of playerA, playerB and playerC in the form "scoreA/scoreB/scoreC" (quotes for clarity).
// 
// 
// DEFINITION
// Class:WordCompositionGame
// Method:score
// Parameters:vector <string>, vector <string>, vector <string>
// Returns:string
// Method signature:string score(vector <string> listA, vector <string> listB, vector <string> listC)
// 
// 
// CONSTRAINTS
// -listA, listB and listC will have between 1 and 50 elements each, inclusive.
// -Each element of listA, listB and listC will contain between 1 and 20 characters, inclusive.
// -Each element of listA, listB and listC will contain only lowercase letters ('a'-'z').
// -All elements in listA will be distinct.
// -All elements in listB will be distinct.
// -All elements in listC will be distinct.
// 
// 
// EXAMPLES
// 
// 0)
// {"cat", "dog", "pig", "mouse"}
// {"cat", "pig"}
// {"dog", "cat"}
// 
// Returns: "8/3/3"
// 
// 1)
// {"mouse"}
// {"cat", "pig"}
// {"dog", "cat"}
// 
// Returns: "3/5/5"
// 
// 2)
// {"dog", "mouse"}
// {"dog", "pig"}
// {"dog", "cat"}
// 
// Returns: "4/4/4"
// 
// 3)
// {"bcdbb","aaccd","dacbc","bcbda","cdedc","bbaaa","aecae"}
// {"bcdbb","ddacb","aaccd","adcab","edbee","aecae","bcbda"}
// {"dcaab","aadbe","bbaaa","ebeec","eaecb","bcbba","aecae","adcab","bcbda"}
// 
// Returns: "14/14/21"
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
