#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <functional>
#include <utility>
#include <sstream>
#include <iostream>
#include <cmath>
#include <ctime>
#include <limits>
#include <iterator>
#include <bitset>
#define sz(m)((m).size())
#define all(a)a.begin(),a.end()
#define forn(i,n)for(int i=0,i##e=n;i<i##e;++i)
#define fori(i,m)forn(i,sz(m))
#define each(i,m)for(typeof(m.begin())i=m.begin(),i##e=m.end();i!=i##e;++i)
#define srt(s)sort(all(s))
#define dump(m)copy(all(m),ostream_iterator<typeof(m[0])>(cout,"\n"));cout<<endl
using namespace std;

struct TableSeating {
	double getExpected(int numTables, vector <int> probs) {
		
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	TableSeating *obj;
	double answer;
	obj = new TableSeating();
	clock_t startTime = clock();
	answer = obj->getExpected(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	double p2;
	
	{
	// ----- test 0 -----
	p0 = 4;
	int t1[] = {100};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	int t1[] = {0,100};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3.3333333333333335;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5;
	int t1[] = {0,0,0,0,0,50,50};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 12;
	int t1[] = {9,9,9,9,9,9,9,9,9,9,10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7.871087929710551;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Your restaurant has numTables tables to seat customers.  The tables are all arranged in a line.  If a large party of customers comes in, a group of adjacent tables will be used.  Which group of tables is entirely up to the customer.  Since you cannot predict this, assume all possible choices occur with equal probability.  What you can predict is the size of each group of customers that arrives.  Element i of probs gives the probability, in percent, that an entering party will need i+1 tables. 
// 
// Assuming nobody leaves, return the expected number of tables you will use before a party must be turned away.  This only occurs if there is no place to seat them.  
// 
// DEFINITION
// Class:TableSeating
// Method:getExpected
// Parameters:int, vector <int>
// Returns:double
// Method signature:double getExpected(int numTables, vector <int> probs)
// 
// 
// NOTES
// -Return values must be accurate to 1e-9, relative or absolute.
// 
// 
// CONSTRAINTS
// -numTables will be between 1 and 12 inclusive.
// -probs will contain between 1 and 12 elements inclusive.
// -Each element of probs will be between 0 and 100 inclusive.
// -The elements of probs will sum to 100.
// 
// 
// EXAMPLES
// 
// 0)
// 4
// {100}
// 
// Returns: 4.0
// 
// Since every party needs only 1 table, you will always fill the restaurant before turning someone away.
// 
// 1)
// 4
// {0,100}
// 
// Returns: 3.3333333333333335
// 
// Now every party wants 2 tables.  One third of the time, the first party will choose the middle 2 tables blocking anyone else from being seated.  Two thirds of the time, the first party will choose 2 tables on the end allowing the restaurant to become full.  Thus, the returned value is (1/3)*2 + (2/3)*4 = 10/3.
// 
// 2)
// 5
// {0,0,0,0,0,50,50}
// 
// Returns: 0.0
// 
// You have 5 tables, but every party needs 6 or 7 tables.
// 
// 3)
// 12
// {9,9,9,9,9,9,9,9,9,9,10}
// 
// Returns: 7.871087929710551
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
