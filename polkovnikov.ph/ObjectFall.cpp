#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <iterator>
#include <tuple>
#include <regex>
#include <array>
#include <valarray>
#define all(v)begin(v),end(v)
#define dump(v)copy(all(v), ostream_iterator<decltype(*m.begin())>(cout, "\n"))
#define rg(i,a,b)for(int i=a,i##e=b;i<i##e;++i)
#define fr(i,n)for(int i=n,i##e=0;i<i##e;++i)
#define rf(i,n)for(int i=n-1;i>=0;--i)
#define ei(a,m)for(auto&a:m)if(int a##i=&a-&*begin(m)+1)if(--a##i,1)
#define sz(v)int(v.size())
#define sr(v)sort(all(v))
#define rs(v)sort(all(v),greater<int>())
#define rev(v)reverse(all(v))
#define eb emplace_back
#define big numeric_limits<int>::max()
#define g(t,i)get<i>(t)
#define cb(v,w)copy(all(v),back_inserter(w))
#define uni(v)sort(all(v));v.erase(unique(all(v)),end(v))
#define vt(...)vector<tuple<__VA_ARGS__>>
#define smx(a,b)a=max(a,b)
#define smn(a,b)a=min(a,b)
typedef long long ll;
using namespace std;

struct ObjectFall {
	int howLong(int x, int y, vector <string> ob) {
		vector<tuple<int, int, int>> o;
		ei(a, ob) {
			stringstream ss;
			ss << a;
			int yy, x1, x2;
			ss >> yy >> x1 >> x2;
			o.eb(yy, x1, x2);
		}
		int t = 0;
		while (y != 0) {
			bool f = false;
			ei(a, o) {
				if (get<0>(a) == y && get<1>(a) <= x && x <= get<2>(a)) {
					f = true;
					x = get<2>(a);
					t += 6;
					break;
				}
			}
			if (!f) ++t;
			--y;
		}
		return t;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <string> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ObjectFall *obj;
	int answer;
	obj = new ObjectFall();
	clock_t startTime = clock();
	answer = obj->howLong(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	vector <string> p2;
	int p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 15;
	p1 = 10;
	p2 = {"005 010 020"};
	p3 = 15;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 15;
	p1 = 12;
	p2 = {"010 010 020","015 010 020","005 020 050"};
	p3 = 22;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 50;
	p1 = 85;
	p2 = {"020 001 100","010 100 100","005 100 200"};
	p3 = 100;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 10;
	p1 = 1000;
	p2 = {};
	p3 = 1000;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 500;
	p1 = 800;
	p2 = {"800 001 500","400 001 499","401 501 999"};
	p3 = 805;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = 645;
	p1 = 802;
	p2 = {"739 038 799","916 169 791","822 372 911","162 125 992","261 307 545","510 031 765","592 723 742","477 315 676","566 143 617","337 114 664","986 648 883","116 230 680","254 746 943","742 948 988","060 117 401","634 035 433","288 741 864","819 626 730","906 071 222","554 100 121","573 051 551","949 528 915","562 151 223","857 135 243","621 115 474","588 405 615","895 812 919","052 378 836","858 116 505","285 428 469","792 244 250","109 265 637","714 804 885","625 150 410","518 593 921","282 235 339","081 212 659","663 047 982","556 194 345","798 150 938","391 026 813","886 348 796","975 007 743","053 854 895","243 561 875"};
	p3 = 817;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
