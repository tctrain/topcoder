#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <functional>
#include <utility>
#include <sstream>
#include <iostream>
#include <cmath>
#include <ctime>
#include <limits>
#include <iterator>
#include <bitset>
#define sz(m)((m).size())
#define all(a)a.begin(),a.end()
#define forn(i,n)for(int i=0,i##e=n;i<i##e;++i)
#define fori(i,m)forn(i,sz(m))
#define each(i,m)for(typeof(m.begin())i=m.begin(),i##e=m.end();i!=i##e;++i)
#define srt(s)sort(all(s))
#define dump(m)copy(all(m),ostream_iterator<typeof(m[0])>(cout,"\n"));cout<<endl
using namespace std;

struct ChatExit {
	vector <int> leaveOrder(vector <string> numSeen) {
		
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ChatExit *obj;
	vector <int> answer;
	obj = new ChatExit();
	clock_t startTime = clock();
	answer = obj->leaveOrder(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <int> p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"0 1 1","2 0 0","3 1 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,0,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"0 1 1","4 0 0","3 1 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"0 100 100 100 100 100","100 0 100 100 100 100","100 100 0 100 100 100","100 100 100 0 100 100","100 100 100 100 0 100","100 100 100 100 100 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,2,3,4,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"0 1 0 0","1 0 0 0","0 0 0 0","0 0 0 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,3,0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"0 0 0 0 0","0 0 0 0 0","0 0 0 0 0","0 0 0 0 0","0 0 0 0 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,2,3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A group of people have participated in an online chat session.  Element i (0-based) of numSeen contains the number of lines of chat seen by person i before leaving (everyone arrives at the same time).  More precisely, integer j in element i of numSeen is the exact number of lines written by person j that are seen by person i before leaving.  Integer i of element i will always be 0, and should be ignored.  You will return a vector <int> containing the order in which each person left.  If multiple orders are possible, return the one that occurs first lexicographically.  If none are possible, return an empty vector <int>.
// 
// DEFINITION
// Class:ChatExit
// Method:leaveOrder
// Parameters:vector <string>
// Returns:vector <int>
// Method signature:vector <int> leaveOrder(vector <string> numSeen)
// 
// 
// NOTES
// -Order A comes lexicographically before order B if A has a lower value than B in the first position that they disagree.
// 
// 
// CONSTRAINTS
// -numSeen will contain between 2 and 25 elements inclusive.
// -Each element of numSeen will contain between 3 and 50 characters inclusive.
// -Each element of numSeen will be a single space delimited list of integers.  Each integer will be between 0 and 100 inclusive, and will have no extra leading zeros.
// -Each element of numSeen will contain exactly k integers, where k is the number of elements in numSeen.
// -Integer i in element i of numSeen will always be 0.
// 
// 
// EXAMPLES
// 
// 0)
// {
// "0 1 1",
// "2 0 0",
// "3 1 0"
// }
// 
// Returns: {1, 0, 2 }
// 
// A possible sequence of events is:
// Person 0 writes a line.
// Person 1 writes a line.
// Person 0 writes a line.
// Person 1 leaves.
// Person 2 writes a line.
// Person 0 writes a line.
// Person 0 leaves.
// Person 2 leaves.
// 
// 1)
// {
// "0 1 1",
// "4 0 0",
// "3 1 0"
// }
// 
// Returns: { }
// 
// No order is possible here due to the following requirements:
// 
//  Person 1 must see 4 lines from person 0, but person 2 must only see 3 lines from person 0. 
//  Person 0 must see 1 line from person 2, but person 1 must not see any.
// 
// The first item above forces person 1 to leave after person 2.  The second item forces person 1 to leave before person 2.
// 
// 2)
// {
// "0 100 100 100 100 100",
// "100 0 100 100 100 100",
// "100 100 0 100 100 100",
// "100 100 100 0 100 100",
// "100 100 100 100 0 100",
// "100 100 100 100 100 0"
// }
// 
// Returns: {0, 1, 2, 3, 4, 5 }
// 
// Everyone says exactly 100 lines.  Any leaving order is possible.  The lexicographically first order is returned.
// 
// 3)
// {
// "0 1 0 0",
// "1 0 0 0",
// "0 0 0 0",
// "0 0 0 0"
// }
// 
// Returns: {2, 3, 0, 1 }
// 
// 4)
// {
// "0 0 0 0 0",
// "0 0 0 0 0",
// "0 0 0 0 0",
// "0 0 0 0 0",
// "0 0 0 0 0"
// }
// 
// Returns: {0, 1, 2, 3, 4 }
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
