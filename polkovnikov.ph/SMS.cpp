#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <functional>
#include <utility>
#include <sstream>
#include <iostream>
#include <cmath>
#include <ctime>
#include <limits>
#include <iterator>
#include <bitset>
#define sz(m)((m).size())
#define all(a)a.begin(),a.end()
#define forn(i,n)for(int i=0,i##e=n;i<i##e;++i)
#define fori(i,m)forn(i,sz(m))
#define each(i,m)for(typeof(m.begin())i=m.begin(),i##e=m.end();i!=i##e;++i)
#define srt(s)sort(all(s))
#define dump(m)copy(all(m),ostream_iterator<typeof(m[0])>(cout,"\n"));cout<<endl
using namespace std;

struct SMS {
	bool vowel(char c) {
		return string("aeiouAEIOU").find(c) != string::npos;
	}
	string compress(string s) {
		vector<string> w;
		string r;
		fori(i, s) {
			if ('a' <= s[i] && s[i] <= 'z' || 'A' <= s[i] && s[i] <= 'Z') {
				r += s[i];
			} else {
				if (!r.empty())
					w.push_back(r);
				w.push_back(string(1, s[i]));
				r = "";
			}
		}
		if (!r.empty())
			w.push_back(r);
		string ret;
		fori(i, w) {
			fori(j, w[i]) {
				if (!vowel(w[i][j])) {
					ret += w[i][j];
					continue;
				}
				int c = 0, d = 0;
				fori(k, w[i]) {
					if (j > k) {
						if (!vowel(w[i][k]))
							++c;
					} else if (j < k) {
						if (!vowel(w[i][k]))
							++d;
					}
					if (c && d) break;
				}
				if (c && d); else
					ret += w[i][j];
			}
		}
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	SMS *obj;
	string answer;
	obj = new SMS();
	clock_t startTime = clock();
	answer = obj->compress(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "Lets meet tomorrow";
	p1 = "Lts mt tmrrw";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "Please come to my party";
	p1 = "Plse cme to my prty";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = " I  like your   style ";
	p1 = " I  lke yr   style ";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Short message service (SMS) has become a fast and quick method for communication. Most service providers place a restriction on the size of messages and hence it is important to write concise messages. Mobile phone users have found methods for compressing their messages such that the content of the messages remains unaltered. One such method is to take the original message and remove all interior vowels from each word. A vowel is interior if there is at least one consonant to the left and right (not necessarily adjacent) of the vowel in the same word.
// 
// Given a string originalMessage with words separated by spaces return the compressed version of the message.
// 
// 
// DEFINITION
// Class:SMS
// Method:compress
// Parameters:string
// Returns:string
// Method signature:string compress(string originalMessage)
// 
// 
// NOTES
// -Vowels are 'a', 'e', 'i', 'o' and 'u' (in both upper and lower cases).
// 
// 
// CONSTRAINTS
// -originalMessage will contain between 0 and 50 characters inclusive.
// -originalMessage will contain only letters ('a'-'z', 'A'-'Z') and spaces.
// 
// 
// EXAMPLES
// 
// 0)
// "Lets meet tomorrow"
// 
// Returns: "Lts mt tmrrw"
// 
// "Lets" becomes "Lts". "meet" becomes "mt". "tomorrow" becomes "tmrrw".
// 
// 1)
// "Please come to my party"
// 
// Returns: "Plse cme to my prty"
// 
// Note that vowels on the end of words are not compressed.
// 
// 2)
// " I  like your   style "
// 
// Returns: " I  lke yr   style "
// 
// Note that 'y' is always considered a consonant in this problem.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
