#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <iterator>
#include <tuple>
#include <regex>
#include <array>
#include <valarray>
#define all(v)begin(v),end(v)

#define fr(i,n)for(int i=0,i##e=n;i<i##e;++i)

#define ei(a,m)for(auto&a:m)if(int a##i=&a-&*begin(m)+1)if(--a##i,1)
#define sz(v)int(v.size())

using namespace std;

struct TileCutting {
	int cuts(vector <string> x) {
		int q[5] = {};
		for (int i = 0, ilen = sz(x); i < ilen; i += 2) {
			for (int j = 0, jlen = sz(x[0]); j < jlen; j += 2) {
				int s = 0;
				fr(k, 2) fr(l, 2) s += x[i+k][j+l] == '.';
				if (s == 2 && x[i][j] == x[i+1][j+1]) {
					q[1] += 2;
				} else {
					++q[s];
				}
			}
		}

		ei(a, q) cout << ai << ' ' << a << endl;

		int total = 0;

		int d = min(q[1], q[3]);
		total += d * 2;
		q[1] -= d;
		q[3] -= d;

		total += q[3] * 2;
		q[1] = max(q[1] - q[3], 0);

		total += (q[2] / 2) * 2;
		q[2] %= 2;

		if (q[2]) {
			total += q[1] ? 3 : 2;
			q[1] = max(q[1] - 2 * q[2], 0);
		}

		total += q[1] / 4 * 4;
		q[1] %= 4;
		if (q[1]) total += q[1] + 1;

		return total;
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TileCutting *obj;
	int answer;
	obj = new TileCutting();
	clock_t startTime = clock();
	answer = obj->cuts(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <string> p0;
	int p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {"..",".."};
	p1 = 0;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {"x.",".."};
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {".x","xx"};
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {"xxxx..xxxx","x..x..xx..","x..xxxxx..","xxxxxxxxxx"};
	p1 = 6;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {"xxxxxx","x....x"};
	p1 = 3;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {"x..x....","x..xx...","..xx....","...x....","......xx","......xx"};
	p1 = 4;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = {"x..xx.x..x.xx..x.xx.","..x..x..x.x..xx...x.",".xx...x...x...x..x..",".xx...x.x.x...x..xx.",".x..x...x.....x...x.",".x.x.x..x..x..x..x.x","...x.x.x.x.x.x.x...x",".x..x..x...x..x...x.","...x.x.x..x.x.x.....","...x.x.x..x.x.xxx.x.","xx.xx.xx.x.x.x.x..x.",".x..xxx...x.xx...x.x","xx..x.x...x.x.x.x..x",".xx..x.xx.xxxxx...xx","x....x.x...x...x.x..",".x.xx.x..x.x.xxx.x..","...xx.xxx.....xx.xxx",".xx..x..xx.x...x.xx.","x.x...x.x.xx.x..x.xx",".....xx.x.......xx.x","x...x.xx.x..x....x..",".x..xxx.....x.x.x.xx"};
	p1 = 121;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 7 -----
	disabled = false;
	p0 = {
			
			};
	p1 = 0;
	all_right = (disabled || KawigiEdit_RunTest(7, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit-pf 2.3.0
//With unused code cleaner (beta) by ahmed_aly
