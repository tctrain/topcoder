#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <iterator>
#include <tuple>
#include <regex>
#include <array>
#include <valarray>
#define all(v)begin(v),end(v)

#define ei(a,m)for(auto&a:m)if(int a##i=&a-&*begin(m)+1)if(--a##i,1)

#define sr(v)sort(all(v))

#define eb emplace_back

#define g(t,i)get<i>(t)

#define vt(...)vector<tuple<__VA_ARGS__>>

using namespace std;

struct SequenceOfNumbers {
	vector <string> rearrange(vector <string> x) {
		vt(int, string) v;
		ei(a, x) v.eb(stoi(a), a);
		sr(v);
		vector<string> w;
		ei(a, v) w.eb(g(a, 1));
		return w;
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SequenceOfNumbers *obj;
	vector <string> answer;
	obj = new SequenceOfNumbers();
	clock_t startTime = clock();
	answer = obj->rearrange(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <string> p0;
	vector <string> p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {"1","174","23","578","71","9"};
	p1 = {"1","9","23","71","174","578"};
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {"172","172","172","23","23"};
	p1 = {"23","23","172","172","172"};
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {"183","2","357","38","446","46","628","734","741","838"};
	p1 = {"2","38","46","183","357","446","628","734","741","838"};
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// It is a common mistake to sort numbers as strings.  For example, a sorted sequence like {"1", "174", "23", "578", "71", "9"} is not correctly sorted if its elements are interpreted as numbers rather than strings.
// You will be given a String[] sequence that is sorted in non-descending order using string comparison.  Return this sequence sorted in non-descending order using numerical comparison instead.
// 
// 
// DEFINITION
// Class:SequenceOfNumbers
// Method:rearrange
// Parameters:vector <string>
// Returns:vector <string>
// Method signature:vector <string> rearrange(vector <string> sequence)
// 
// 
// CONSTRAINTS
// -sequence will contain between 2 and 50 elements inclusive. 
// -Each element of sequence will contain between 1 and 9 characters inclusive.
// -Each element of sequence will consist of only digits ('0'-'9').
// -Each element of sequence will not start with a '0' digit.
// -sequence will be ordered lexicographically.
// 
// 
// EXAMPLES
// 
// 0)
// {"1","174","23","578","71","9"}
// 
// Returns: {"1", "9", "23", "71", "174", "578" }
// 
// 1)
// {"172","172","172","23","23"}
// 
// Returns: {"23", "23", "172", "172", "172" }
// 
// 2)
// {"183","2","357","38","446","46","628","734","741","838"}
// 
// Returns: {"2", "38", "46", "183", "357", "446", "628", "734", "741", "838" }
// 
// END KAWIGIEDIT TESTING//Powered by KawigiEdit-pf 2.3.0
//With unused code cleaner (beta) by ahmed_aly
