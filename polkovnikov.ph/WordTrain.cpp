#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <functional>
#include <utility>
#include <sstream>
#include <iostream>
#include <cmath>
#include <ctime>
#include <limits>
#include <iterator>
#include <bitset>
#define sz(m)((m).size())
#define all(a)a.begin(),a.end()
#define forn(i,n)for(int i=0,i##e=n;i<i##e;++i)
#define fori(i,m)forn(i,sz(m))
#define each(i,m)for(typeof(m.begin())i=m.begin(),i##e=m.end();i!=i##e;++i)
#define srt(s)sort(all(s))
#define dump(m)copy(all(m),ostream_iterator<typeof(m[0])>(cout,"\n"));cout<<endl
using namespace std;

struct WordTrain {
	string hookUp(vector <string> cars) {
		
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	WordTrain *obj;
	string answer;
	obj = new WordTrain();
	clock_t startTime = clock();
	answer = obj->hookUp(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"CBA","DAA","CXX"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "ABC-CXX";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"ACBA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "ABCA";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"AUTOMATA","COMPUTER","ROBOT"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "COMPUTER-ROBOT";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"AAA","AAAA","AAA","AAA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "AAA-AAA-AAA-AAAA";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"ABA","BBB","COP","COD","BAD"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "BBB-BAD";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// We have a collection of train cars. We want to hook them together to get the
// train with the most cars possible. Some cars have a unique front end, and some
// can have either end in front. Two cars can be coupled together only if their 
// coupling mechanisms are compatible.
// 
// Each car is described by a string of uppercase letters. The front end is the 
// end with the letter that comes first in the alphabet (if it starts and ends 
// with the same letter, either end can be in front). Two words can be hooked 
// together only if the two adjoining ends have the same letter.  Create a class 
// WordTrain that contains the method hookUp that takes cars, a vector <string>, and 
// returns a string which is the longest word train that can be made from cars.
// 
// If more than one train of the longest length is possible, return the one that 
// comes first alphabetically.  Remember that the length of a train is the number 
// of cars, not the number of letters.
// 
// The returned string should be all the cars in the train, starting at the
// front of the train, concatenated with '-' showing the coupling between adjacent
// cars. For alphabetic breaking of ties, the '-' is included in its usual order 
// in the ASCII sequence.
// 
// 
// 
// DEFINITION
// Class:WordTrain
// Method:hookUp
// Parameters:vector <string>
// Returns:string
// Method signature:string hookUp(vector <string> cars)
// 
// 
// CONSTRAINTS
// -cars contains between 1 and 50 elements inclusive.
// -Each element of cars contains only uppercase letters ('A'-'Z').
// -Each element of cars contains between 3 and 10 characters inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {"CBA","DAA","CXX"}
// 
// Returns: "ABC-CXX"
// 
// 
// 
// This is the only possible train of length 2. Note that CBA needed to be reversed 
// so that it was facing the right direction.
//   
// 
// 
// 1)
// {"ACBA"}
// 
// Returns: "ABCA"
// 
// 2)
// {"AUTOMATA","COMPUTER","ROBOT"}
// 
// Returns: "COMPUTER-ROBOT"
// 
// 3)
// {"AAA","AAAA","AAA","AAA"}
// 
// Returns: "AAA-AAA-AAA-AAAA"
// 
// '-' sorts before uppercase letters
// 
// 
// 4)
// {"ABA","BBB","COP","COD","BAD"}
// 
// Returns: "BBB-BAD"
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
