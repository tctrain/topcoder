#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <functional>
#include <utility>
#include <sstream>
#include <iostream>
#include <cmath>
#include <ctime>
#include <limits>
#include <iterator>
#include <bitset>
#define sz(m)((m).size())
#define all(a)a.begin(),a.end()
#define forn(i,n)for(int i=0,i##e=n;i<i##e;++i)
#define fori(i,m)forn(i,sz(m))
#define each(i,m)for(typeof(m.begin())i=m.begin(),i##e=m.end();i!=i##e;++i)
#define srt(s)sort(all(s))
#define dump(m)copy(all(m),ostream_iterator<typeof(m[0])>(cout,", "));cout<<endl
using namespace std;

struct CircleDance {
	int arrangeDancers(vector <int> h) {
		srt(h);
		int mx = 0;
		fori(i, h) if (i > 1) mx = max(mx, h[i] - h[i - 2]);
		return mx;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	CircleDance *obj;
	int answer;
	obj = new CircleDance();
	clock_t startTime = clock();
	answer = obj->arrangeDancers(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {180,183,178,185};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {170,180,190};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 20;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {180,180,180,180,180};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {184,165,175,186,192,200,176,192,194,168,205,201};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Given a group of dancers' heights, arrange a circle formation that minimizes the maximum height difference between each pair of neighboring dancers.
// Write a class CircleDance with a method arrangeDancers that takes a vector <int>, heights, and returns the maximum height difference between neighboring dancers.
// 
// DEFINITION
// Class:CircleDance
// Method:arrangeDancers
// Parameters:vector <int>
// Returns:int
// Method signature:int arrangeDancers(vector <int> heights)
// 
// 
// CONSTRAINTS
// -heights will contain between 3 and 20 elements inclusive.
// -Each element of heights will be between 150 and 210 inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {180,183,178,185}
// 
// Returns: 5
// 
// The dancers may be arranged in a circle like this:
// 
//     180
//    /   \
// 185     178
//    \   /
//     183
// 
// Their height differences are shown below:
// 
//     180
// (5)/   \(2)
// 185     178
// (2)\   /(5)
//     183
// 
// The maximum difference is 5.
// Other arrangements may not lead to an optimal solution. For example, the following one has a maximum difference of 7:
// 
//     180
// (3)/   \(2)
// 183     178
// (2)\   /(7)
//     185
// 
// 
// 1)
// {170,180,190}
// 
// Returns: 20
// 
// Any arrangement is equivalent to the following one:
// 
//      180
//  (10)/ \(10)
//   170 - 190
//     (20)
// 
// So the result is 20. 
// 
// 2)
// {180,180,180,180,180}
// 
// Returns: 0
// 
// 3)
// {184,165,175,186,192,200,176,192,194,168,205,201}
// 
// Returns: 10
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
