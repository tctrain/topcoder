#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <functional>
#include <utility>
#include <sstream>
#include <iostream>
#include <cmath>
#include <ctime>
#include <limits>
#include <iterator>
#include <bitset>
#define sz(m)((m).size())
#define all(a)a.begin(),a.end()
#define forn(i,n)for(int i=0,i##e=n;i<i##e;++i)
#define fori(i,m)forn(i,sz(m))
#define each(i,m)for(typeof(m.begin())i=m.begin(),i##e=m.end();i!=i##e;++i)
#define srt(s)sort(all(s))
#define dump(m)copy(all(m),ostream_iterator<typeof(m[0])>(cout,"\n"));cout<<endl
using namespace std;

struct LanguageRecognition {
	pair<vector<int>,int> stats(string & s) {
		vector<int> r(26);
		int c = 0;
		fori(i, s) {
			if ('A' <= s[i] && s[i] <= 'Z')
				s[i] = s[i] - 'A' + 'a';
			if ('a' <= s[i] && s[i] <= 'z')
				++r[s[i] - 'a'], ++c;
		}
		return make_pair(r, c);
	}
	int whichLanguage(vector <string> languages, string text) {
		int mni = -1, mnn = -1, mnd = -1;
		pair<vector<int>, int> p1 = stats(text);
		fori(i, languages) {
			pair<vector<int>, int> p2 = stats(languages[i]);
			long long t = 0, u = p1.second * p2.second;
			fori(i, p1.first) {
				long long v = p1.first[i] * p2.second - p1.second * p2.first[i];
				v *= v;
				t += v;
			}
			u *= u;
			if (mni == -1 || mnn * u > t * mnd) {
				mni = i;
				mnn = t;
				mnd = u;
			}
		}
		return mni;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, string p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	LanguageRecognition *obj;
	int answer;
	obj = new LanguageRecognition();
	clock_t startTime = clock();
	answer = obj->whichLanguage(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"This is an English sentence.","Dieser ist ein Deutscher Satz.","C'est une phrase Francaise.","Dit is een Nederlandse zin."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "In welke taal is deze zin geschreven?";
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"aaaaa","bbbb","ccc","dd","e"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "xxx";
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"AABB","AaBb","A? B!","ab!@#$%"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "ab";
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// For computers it can be hard to determine in which language a given text is written. A simple way to try to determine the language is the following: for the given text and for some sample texts, for which we know the languages, we determine the letter frequencies and compare these.
// 
// 
// 
// The frequency of a letter is the total number of occurrences of that letter divided by the total number of letters in the text. To determine this, we ignore case and non-letter characters.
// 
// 
// 
// Once the letter frequencies of the text and of a language are known, we can calculate the difference between the two. This difference we define by the sum of the squared differences of the frequencies:
// 
// 
// 
// 
// The lesser this value, the closer text resembles that language. Compare text with each element of languages and return the (0-based) index of the language that has the smallest difference with text. In case of a tie, return the smallest index.
// 
// 
// 
// DEFINITION
// Class:LanguageRecognition
// Method:whichLanguage
// Parameters:vector <string>, string
// Returns:int
// Method signature:int whichLanguage(vector <string> languages, string text)
// 
// 
// CONSTRAINTS
// -languages contains between 1 and 50 elements, inclusive.
// -Each element of languages has length between 1 and 50, inclusive.
// -text has length between 1 and 50, inclusive.
// -Each element of languages and text consists only of characters with ASCII value between 32 and 127, inclusive.
// -Each element of languages and text contains at least one letter ('A'-'Z' and 'a'-'z').
// 
// 
// EXAMPLES
// 
// 0)
// {"This is an English sentence.",
//  "Dieser ist ein Deutscher Satz.",
//  "C'est une phrase Francaise.",
//  "Dit is een Nederlandse zin."
// }
// "In welke taal is deze zin geschreven?"
// 
// Returns: 3
// 
// The differences are 0.0385, 0.0377, 0.0430 and 0.0276, so the sentence is written in language 3, Dutch. Note that Dutch is somewhat similar to German, somewhat less similar to English and not similar to French.
// 
// 1)
// {"aaaaa","bbbb","ccc","dd","e"}
// "xxx"
// 
// Returns: 0
// 
// In case of a tie, return the language with the smallest index.
// 
// 2)
// {"AABB","AaBb","A? B!","ab!@#$%"}
// "ab"
// 
// Returns: 0
// 
// Ignore case and the non-letter characters.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
